Q1:Reverse an Array
Q2:Rotate an Array
Q3:Convert array into Zig-Zag fashion
Given an array of DISTINCT elements, rearrange the 
elements of array in zig-zag fashion in O(n) time. The 
converted array should be in form a < b > c < d > e < f.
Input: arr[] = {4, 3, 7, 8, 6, 2, 1}
Output: arr[] = {3, 7, 4, 8, 2, 6, 1}
Q4:Find the Leader Element in an Array
Q5: Find the Missing Number
You are given a list of n-1 integers and these integers 
are in the range of 1 to n. There are no duplicates in the 
list. One of the integers is missing in the list. Write an 
efficient code to find the missing integer.
Input: arr[] = {1, 2, 4, 6, 3, 7, 8}
Output: 5
Q6:Given an integer array A that contains only integers 0 
and 1. Write a function to sort this array
Sample Input :
7
0 1 1 0 1 0 1
Sample Output :0 0 0 1 1 1 1

Q7:Given an integer array containing only 0s, 1s and 2s. 
Write a solution to sort this array using one scan only.
You need to change in the given array itself. So no need 
to return or print anything.
Input format :
Line 1 : Integer n (Array Size)
Line 2 : Array elements (separated by space)
Sample Input:
7
0 1 2 0 2 0 1
Sample Output:
0 0 0 1 1 2 2
Q8:Third Second , First Largest in array
Given a random integer array of size n, find and return the Third, second , First largest element present in the 
array.
Q9:An array contains both positive and negative numbers 
in random order. Rearrange the array elements so that all negative numbers appear before all positive 
numbers.
Examples :
Input : -12, 11, -13, -5, 6, -7, 5, -3, -6
Output :-12 -13 -5 -7 -3 -6 11 6 
Q10:Majority Element in N Size Array


21/03
=====
22, 79, 78, 131, 17, 496, 503, 53, 26, 189
Q1:881(boats to save people)
Q2:747
Q3:169
Q4:229
Q5:769
Q7:768
Q8:795
Q9:628
Q10:equillibrium index=>right side and left side sum from an indedx is equal
=>prefix sum 
=>sum and newsum

27/03
===
=>count number of subarrays consisting of first k natural numbers in descending order.
{1,2,3,3,2,1,8,7,6}  k=3
result=>1

=>maximum sum subsequence of k distant elements including first and last elements.
{11,-4,-2,1,0,4}  k=3
result ::sum=16

=>how many numbers are smaller than the current number in given array
{5,1,3,2,2}
result-> {4,0,3,1,1}


28/03
=====
1299
1389

find if there is a subarray with 0 sum.
{2,3,4,-2,-1,-2,1,8}==>[2,5,9,7,6,4,5,13]=>{2,6}
{1,2,3,-6,3,4,4,3}==>{1,3,6,0,3,7,11,14}=>{0,3},{2,4}

55
56
62
75
121
122

//4/4/2021
//14/4/21
1004
925
763
838
43
680
41